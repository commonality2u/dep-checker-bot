# audit/auto_pr_generator.py

import logging
from github import Github, InputGitAuthor, GithubException
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='[%(levelname)s] %(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)

def create_branch_if_not_exists(repo, base_branch, head_branch):
    """
    Create a branch from base_branch if head_branch doesn't exist.
    """
    try:
        repo.get_branch(head_branch)
        logging.info(f"‚úÖ Branch '{head_branch}' already exists.")
    except GithubException:
        logging.info(f"‚ö†Ô∏è Branch '{head_branch}' does not exist. Creating it from '{base_branch}'.")
        base = repo.get_branch(base_branch)
        repo.create_git_ref(ref=f"refs/heads/{head_branch}", sha=base.commit.sha)
        logging.info(f"‚úÖ Branch '{head_branch}' created from '{base_branch}'.")

def commit_files_to_branch(repo, head_branch, files, commit_message, author_name="Audit Bot", author_email="audit@example.com"):
    """
    Commit files to a branch.
    
    Parameters:
        repo: PyGithub Repository object.
        head_branch (str): Branch where to commit.
        files (list): List of file paths to commit.
        commit_message (str): Commit message.
        author_name (str): Author name for the commit.
        author_email (str): Author email for the commit.
    """
    try:
        # Get the latest commit SHA
        ref = repo.get_git_ref(f"heads/{head_branch}")
        latest_commit = repo.get_commit(ref.object.sha)
        base_tree = repo.get_git_tree(latest_commit.sha)

        # Prepare blobs for each file
        element_list = []
        for file_path in files:
            path = Path(file_path)
            if not path.exists():
                logging.warning(f"‚ö†Ô∏è File not found: {file_path}. Skipping.")
                continue
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            blob = repo.create_git_blob(content, "utf-8")
            element_list.append({
                "path": file_path,
                "mode": "100644",
                "type": "blob",
                "sha": blob.sha
            })

        if not element_list:
            logging.warning("‚ö†Ô∏è No files to commit.")
            return

        # Create a new tree with the files
        new_tree = repo.create_git_tree(element_list, base_tree)
        author = InputGitAuthor(author_name, author_email)
        new_commit = repo.create_git_commit(commit_message, new_tree, [latest_commit.commit], author=author)
        ref.edit(new_commit.sha)
        logging.info(f"‚úÖ Files committed to branch '{head_branch}'.")
    except GithubException as e:
        logging.error(f"Error committing files: {e}")

def create_pull_request(
    github_token,
    repo_name,
    base_branch="main",
    head_branch="audit/update-dependencies",
    files_to_commit=None,
    commit_message="Audit Report Update",
    pr_title="Audit Report: Update Dependencies",
    pr_body="This PR was automatically generated by the audit tool.",
    reviewers=None,
    labels=None,
    draft=False,
    author_name="Audit Bot",
    author_email="audit@example.com",
    min_health_score=None,
    health_score=100
):
    """
    Create a pull request in the given GitHub repository.
    """
    try:
        g = Github(github_token)
        repo = g.get_repo(repo_name)
        #Check health score
        if min_health_score is not None and health_score >= min_health_score:
            logging.warning(f"Health score {health_score} is below the minimum required {min_health_score}. Skipping PR creation.")
            return None
        # Create branch if it doesn't exist
        create_branch_if_not_exists(repo, base_branch, head_branch)

        # Commit files if provided
        if files_to_commit:
            commit_files_to_branch(repo, head_branch, files_to_commit, commit_message, author_name, author_email)

        # Create the PR
        pr = repo.create_pull(
            title=pr_title,
            body=pr_body,
            base=base_branch,
            head=head_branch,
            draft= draft
       )
        logging.info(f"‚úÖ Pull request created: {pr.html_url}")
        #Add reviewers
        if reviewers:
            try:
                pr.create_review_request(reviewers= reviewers)
                logging.info(f"üë• Reviewers assigned: {', '.join(reviewers)}")
            except GithubException as e:
                logging.warning(f"‚ö†Ô∏è Could not assing reviewers: {e}")
        #Add labels
        if labels:
            try:
                pr.add_to_labels(*labels)
                logging.info(f"üè∑Ô∏è Labels added: {', '.join(labels)}")
            except GithubException as e:
                logging.warning(f"‚ö†Ô∏è Could not add labels: {e}")
        return pr
    except ValueError as e:
        logging.error(f"Invalid input: {e}")
    except GithubException as e:
        if e.status == 401:
            logging.error("Authentication failed. Check your Github token and permissions.")
        else:
            logging.error(f"Error creating pull request: {e}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    return None


def run():
    """Demostration entry point for CLI integration."""
    logging.info("auto_pr_generator module executed")

if __name__ == "__main__":
    
    token = "your_github_token_here"
    repo_name = "your_username/your_repo"
    files = ["audit_report.json", "badge.svg"]
    create_pull_request(
        github_token=token,
        repo_name=repo_name,
        base_branch="main",
        head_branch="audit/update-dependencies",
        files_to_commit=files,
        commit_message="üîí Audit report and badge updated.",
        pr_title="üîí Auditory: Dependencies and badge",
        pr_body="A new audit report and updated badge have been generated. Please review the changes.",
        reviewers=["usuario1", "usuario2"],
        labels=["dependencies", "audit", "automated"],
        draft=True,
        author_name="Audit Bot",
        author_email="audit@example.com",
        min_health_score=85,
        health_score=80, 
    )
